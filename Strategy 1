 //@version=5
indicator("Approximate Spectral Entropy-Based Market Momentum (SEMM)", overlay=false)

// Function to calculate approximate spectral entropy
approx_entropy(src, length) =>
    // Calculate the price returns (log returns)
    log_returns = array.new_float(length, 0)
    for i = 0 to length - 1
        if i > 0
            array.set(log_returns, i, math.log(src[i] / src[i-1]))

    // Normalize returns to create a probability distribution
    max_return = array.max(log_returns)
    min_return = array.min(log_returns)
    value_range = max_return - min_return
    prob_dist = array.new_float(length, 0)
    
    for i = 0 to length - 1
        norm_value = (array.get(log_returns, i) - min_return) / value_range
        array.set(prob_dist, i, norm_value)

    // Calculate Shannon entropy
    entropy = 0.0
    for i = 0 to length - 1
        p = array.get(prob_dist, i)
        if p > 0
            entropy := entropy - p * math.log(p + 1e-10) / math.log(length)

    entropy

// Inputs
length = input.int(50, title="Length", minval=10)
src = close

// Approximate Spectral Entropy Calculation
entropy = approx_entropy(src, length)
plot(entropy, title="Approximate Spectral Entropy", color=color.blue)

// Momentum Calculation (Rate of Change as an example)
roc = ta.roc(src, length)
semm = roc * entropy

// Plotting SEMM
plot(semm, title="SEMM", color=color.red)

